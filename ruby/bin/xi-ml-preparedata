#!/usr/bin/ruby
# encoding: utf-8


require 'optparse'

$LOAD_PATH.unshift 'lib/'
require 'xi/ml'


#======================================================================
# Setup loggers level
#======================================================================

Xi::ML::Tools::Logger.global_level = Log4r::INFO


#======================================================================
# Parse the command line arguments
#======================================================================

@options = {}

parser = OptionParser.new do |opts|
  opts.banner = "Object: extract content from  ES, build corpus, clean data\n"
  opts.banner << 'Usage:  ./bin/xi-ml-preparedata [options]'

  opts.on('-c CONF', '--conf CONF', 'Config file') do |v|
    @options[:conf] = v
  end
  opts.on_tail('-h', '--help', 'Show this message') do
    Xi::ML.logger.info(opts)
    exit
  end
end

begin
  parser.parse!
  abort "[Error] Empty argument(s)\n\n#{parser}" if @options[:conf].nil?
rescue OptionParser::InvalidOption => e1
  abort "[Error] #{e1.message.capitalize}\n\n#{parser}"
rescue OptionParser::MissingArgument => e2
  abort "[Error] #{e2.message.capitalize}\n\n#{parser}"
end

Xi::ML::Tools::Utils.check_file_readable!(@options[:conf])


#======================================================================
# Load configuration
#======================================================================

begin
  @conf = YAML.load(File.read(@options[:conf]))
  abort "[Error] Empty list in YAML file '#{@options[:conf]}'" if @conf.empty?
  abort "[Error] YAML object stored in '#{@options[:conf]}' is not a HASH" \
    unless @conf.is_a?(Hash)
rescue => e
  abort "[Error] Bad format of YAML file '#{@options[:conf]}' : #{e.message}"
end

# @conf[:lang]              process documents of language 'lang'
# @conf[:classes]           process documents of classes 'classes'
# @conf[:version]           data version (optional)
# @conf[:res]               config for the resources locations (data, conf)
# @conf[:execution]         which steps to execute
# @conf[:extract][:es]      config for ElasticSearch (name, ip, host, port)
# @conf[:extract][:esquery] config for the ES query (index, type, min_nchars)
# @conf[:extract][:hosts]   category hosts for ES extraction
# @conf[:extract][:query_filter] type of filter to apply on hosts url
# @conf[:build][:division]  divide corpus into train/dev/test subsets
# @conf[:clean][:preprocs]  list of preprocessing types to apply on data

Xi::ML.logger.info("Processing current configuration:\n#{PP.pp(@conf, '')}")


#======================================================================
# Checkup config options
#======================================================================

[:lang, :classes, :res, :execution].each do |arg|
  abort "Missing argument '#{arg}'" unless @conf.key?(arg)
end

if @conf[:execution].include?(:extract)
  abort 'Missing argument :extract' unless @conf.key?(:extract)

  [:es, :esquery, :hosts, :query_filter].each do |arg|
    abort "Missing argument '#{arg}'" unless @conf[:extract].key?(arg)
  end

  [:name, :ip, :host, :port].each do |arg|
    abort "Missing argument '#{arg}'" unless @conf[:extract][:es].key?(arg)
  end

  [:index, :type, :source, :min_nchars].each do |arg|
    abort "Missing argument '#{arg}'" unless @conf[:extract][:esquery].key?(arg)
  end

  @conf[:classes].each do |arg|
    abort "Missing argument '#{arg}'" unless @conf[:extract][:hosts].key?(arg)
  end

  # check if hosts files exist
  @conf[:extract][:hosts].each do |_, hosts_file|
    Xi::ML::Tools::Utils.check_file_readable!(hosts_file)
  end
end

if @conf[:execution].include?(:build)
  abort 'Missing argument :build' unless @conf.key?(:build)
  abort 'Missing argument :division' unless @conf[:build].key?(:division)
end

if @conf[:execution].include?(:clean)
  abort 'Missing argument :clean' unless @conf.key?(:clean)
  abort 'Missing argument :preprocs' unless @conf[:clean].key?(:preprocs)
end


#======================================================================
# Set version and base resources directory variables
#======================================================================

# setup data version
if @conf.key?(:version)
  version = @conf[:version]
elsif @conf.key?(:extract)
  date = Time.now.strftime('%d%m%Y')
  version = "#{@conf[:extract][:es][:name]}_#{date}"
else
  abort 'Do not know which data to process'
end

# base data dir
ddata = File.join(@conf[:res], @conf[:lang], version)
Xi::ML::Tools::Utils.create_folder(ddata)


#======================================================================
# Set local ressources configuration : where to save the data
#======================================================================

# list of preprocessings types
preproc_names = []
if @conf[:execution].include?(:clean)
  preproc_names = @conf[:clean][:preprocs].keys()
  preproc_names = preproc_names.map {|ptype| ptype.to_s }
end

# paths for data: extracted, divided, preprocessed
pg = Xi::ML::Tools::PathGenerator.new(ddata, @conf[:classes],
  %w[train dev test], preproc_names, [], [])
@local = pg.paths

=begin
Paths example
@local =
{
  'data': {
    'sport': {
      'extracted': '...',
      'divided': { 'train': '...', 'dev': '...', 'test': '...'},
      'preprocessed': {
        'PLW': { 'train': '...', 'dev': '...', 'test': '...'},
        'PDLW': { 'train': '...', 'dev': '...', 'test': '...'},
        ...
        }
      }
    'non-sport': {
      ...
      }
  }
}
=end


#======================================================================
# Extract data from ES (if requested)
#======================================================================

if @conf[:execution].include?(:extract)
  Xi::ML.logger.info('Extract data from ES')

  # create new data fetcher: init the ES client
  @fetcher = Xi::ML::Extract::DataFetcher.new(
    @conf[:extract][:es][:host], @conf[:extract][:es][:port])

  # save extracted data into 1 json file for each category
  @conf[:classes].each do |category|
    input_config_file = @conf[:extract][:hosts][category]
    output_data_file = @local['data'][category]['extracted']

    Xi::ML.logger.info("Extract #{category} content from ES ")

    # create the ES query based on the hosts list
    @query = Xi::ML::Extract::Query.new(input_config_file,
      @conf[:lang], @conf[:extract][:query_filter])

    # setup the search configuration
    # execute the query on the current ES client => create and save new corpus
    @fetcher.search_and_save(
      category: category,
      indexes: @conf[:extract][:esquery][:index],
      types: @conf[:extract][:esquery][:type],
      source: @conf[:extract][:esquery][:source],
      query: @query,
      min_nchars: @conf[:extract][:esquery][:min_nchars],
      output: output_data_file,
    )
  end
end

#======================================================================
# Build corpus => 3 json files (if requested)
#======================================================================

if @conf[:execution].include?(:build)
  Xi::ML.logger.info('Build subsets')

  @conf[:classes].each do |category|
    input_file = @local['data'][category]['extracted']
    output_files_hash = @local['data'][category]['divided']

    Xi::ML.logger.info("Build #{category} train/dev/test corpus")

    @cb = Xi::ML::Build::CorpusBuilder.new(input_file)
    @cb.build(output_files_hash, @conf[:build][:division])
  end
end

#======================================================================
# Preprocess data => 1 json file per input file (if requested)
#======================================================================

if @conf[:execution].include?(:clean)
  Xi::ML.logger.info('Preprocess data')

  @conf[:clean][:preprocs].each do |pname, options|
    Xi::ML.logger.info('Initialize corpus cleaner')
    @cc = Xi::ML::Preprocess::CorpusCleaner.new(options)

    @conf[:classes].each do |category|

      %w[train dev test].each do |subset|
        input = @local['data'][category]['divided'][subset]
        output = @local['data'][category]['preprocessed'][pname.to_s][subset]

        Xi::ML.logger.info(
          "Preprocess #{category}-#{subset} corpus: method=#{pname.to_s}")

        @cc.clean(input, output)
      end
    end
  end
end
