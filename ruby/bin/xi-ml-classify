#!/usr/bin/ruby
# encoding: utf-8


require 'optparse'

$LOAD_PATH.unshift 'lib/'
require 'xi/ml'


#======================================================================
# Setup loggers level
#======================================================================

Xi::ML::Tools::Logger.global_level = Log4r::INFO


#======================================================================
# Parse the command line arguments
#======================================================================

@options = {}

parser = OptionParser.new do |opts|
  opts.banner = "Object: preprocess, transform and classify new documents\n"
  opts.banner << 'Usage:  ./bin/xi-ml-classify [options]'

  opts.on('-i INPUT', '--input INPUT', 'Input file') {|v| @options[:input] = v }
  opts.on('-c CONF', '--conf CONF', 'Config file') {|v| @options[:conf] = v }
  opts.on_tail('-h', '--help', 'Show this message') do
    puts opts
    exit
  end
end

begin
  parser.parse!
  abort "[Error] Empty argument(s)\n\n#{parser}" \
    if @options[:conf].nil? || @options[:input].nil?
rescue OptionParser::InvalidOption => e1
  abort "[Error] #{e1.message.capitalize}\n\n#{parser}"
rescue OptionParser::MissingArgument => e2
  abort "[Error] #{e2.message.capitalize}\n\n#{parser}"
end

Xi::ML::Tools::Utils.check_file_readable!(@options[:input])
Xi::ML::Tools::Utils.check_file_readable!(@options[:conf])


#======================================================================
# Load configuration
#======================================================================

begin
  @conf = YAML.load(File.read(@options[:conf]))
  abort "[Error] Empty list in YAML file '#{@options[:conf]}'" if @conf.empty?
  abort "[Error] YAML object stored in '#{@options[:conf]}' is not a HASH" \
    unless @conf.is_a?(Hash)
rescue => e
  abort "[Error] Bad format of YAML file '#{@options[:conf]}' : #{e.message}"
end

# @conf[:execution]   which steps to execute
# @conf[:clean]       which cleaners to apply on data
# @conf[:transform]   which transformation models to apply on preprocessed data
# @conf[:classify]    which classifier model to apply on transformed data

abort "Missing argument ':execution'" unless @conf.key?(:execution)

Xi::ML.logger.info("Processing current configuration:\n#{PP.pp(@conf, '')}")


#======================================================================
# Checkup config options
#======================================================================

[:clean, :transform, :classify].each do |arg|
  abort "Missing argument '#{arg}'" \
    if @conf[:execution].include?(arg) && !@conf.key?(arg)
end


#======================================================================
# Preload models
#======================================================================

Xi::ML.logger.info('Load models')

if @conf[:execution].include?(:clean) && @conf.key?(:clean)
  @cleaner = Xi::ML::Preprocess::CorpusCleaner.new(@conf[:clean])
end

if @conf[:execution].include?(:transform) && @conf.key?(:transform)
  @transformer = Xi::ML::Transform::Transformer.new(
    @conf[:transform][:name], @conf[:transform][:files])
end

if @conf[:execution].include?(:classify) && @conf.key?(:classify)
  @classifier = Xi::ML::Classify::Classifier.new(
    @conf[:classify][:name], @conf[:classify][:file])
end


#======================================================================
# Preprocess, transform and classify one document at a time
#======================================================================

# clean documents
if [:clean] == @conf[:execution]
  Xi::ML.logger.info('Clean documents')

  @timer = Xi::ML::Tools::Timer.new()

  File.read(@options[:input]).each_line do |line|
    doc = line.chomp()

    @timer.start_timer()
    clean_doc = @cleaner.clean_doc(doc)
    @timer.stop_timer("Document of #{doc.split(' ').size} words cleaned")

    Xi::ML.logger.info(clean_doc)
  end
end

# clean and transform documents
if [:clean, :transform] == @conf[:execution]
  Xi::ML.logger.info('Clean and transform documents')

  @timer = Xi::ML::Tools::Timer.new()

  File.read(@options[:input]).each_line do |line|
    doc = line.chomp()

    @timer.start_timer()
    clean_doc = @cleaner.clean_doc(doc)
    trans_doc = @transformer.transform_doc(clean_doc)
    @timer.stop_timer(
      "Document of #{doc.split(' ').size} words cleaned and transformed")

    Xi::ML.logger.info(trans_doc)
  end
end

# clean, transform and classify documents
if [:clean, :transform, :classify] == @conf[:execution]
  Xi::ML.logger.info('Clean, transform and classify documents')

  @timer = Xi::ML::Tools::Timer.new()

  File.read(@options[:input]).each_line do |line|
    doc = line.chomp()

    @timer.start_timer()
    clean_doc = @cleaner.clean_doc(doc)
    trans_doc = @transformer.transform_doc(clean_doc)
    prediction = @classifier.classify_doc(trans_doc)

    @timer.stop_timer("Predicted class #{prediction[:category].ljust(9)} "\
      + "(prob=#{prediction[:probas]}) "\
      + "for document of #{doc.split(' ').size} words")
  end
end
