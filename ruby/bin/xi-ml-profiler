#!/usr/bin/ruby
# encoding: utf-8


require 'optparse'
require 'ruby-prof'

$LOAD_PATH.unshift 'lib/'
require 'xi/ml'


#======================================================================
# Setup loggers level
#======================================================================

Xi::ML::Tools::Logger.global_level = Log4r::INFO


#======================================================================
# Parse the command line arguments
#======================================================================

@options = {}

parser = OptionParser.new do |opts|
  opts.banner = 'Object: profile preprocessing, transformation, classification'
  opts.banner << "\nUsage: ./bin/xi-ml-profiler [options]"

  opts.on('-i INPUT', '--input INPUT', 'Input file') {|v| @options[:input] = v }
  opts.on('-c CONF', '--conf CONF', 'Config file') {|v| @options[:conf] = v }
  opts.on('-o OT', '--output OT', 'Output folder') {|v| @options[:output] = v }
  opts.on_tail('-h', '--help', 'Show this message') do
    puts opts
    exit
  end
end

begin
  parser.parse!
  abort "[Error] Empty argument(s)\n\n#{parser}" \
    if @options[:conf].nil? || @options[:input].nil? || @options[:output].nil?
rescue OptionParser::InvalidOption => e1
  abort "[Error] #{e1.message.capitalize}\n\n#{parser}"
rescue OptionParser::MissingArgument => e2
  abort "[Error] #{e2.message.capitalize}\n\n#{parser}"
end

Xi::ML::Tools::Utils.check_file_readable!(@options[:input])
Xi::ML::Tools::Utils.check_file_readable!(@options[:conf])
Xi::ML::Tools::Utils.create_folder(@options[:output])


#======================================================================
# Load and check configuration
#======================================================================

begin
  @conf = YAML.load(File.read(@options[:conf]))
  abort "[Error] Empty list in YAML file '#{@options[:conf]}'" if @conf.empty?
  abort "[Error] YAML object stored in '#{@options[:conf]}' is not a HASH" \
    unless @conf.is_a?(Hash)
rescue => e
  abort "[Error] Bad format of YAML file '#{@options[:conf]}' : #{e.message}"
end

# @conf[:clean]       which cleaners to apply on data
# @conf[:transform]   which transformation models to apply on preprocessed data
# @conf[:classify]    which classifier model to apply on transformed data

[:clean, :transform, :classify].each do |arg|
  abort "Missing argument '#{arg}'" unless @conf.key?(arg)
end

Xi::ML.logger.info("Processing current configuration:\n#{PP.pp(@conf, '')}")


#======================================================================
# Preload models
#======================================================================

Xi::ML.logger.info('Load models')

@cleaner = Xi::ML::Preprocess::CorpusCleaner.new(@conf[:clean])
@transformer = Xi::ML::Transform::Transformer.new(
  @conf[:transform][:name], @conf[:transform][:files])
@classifier = Xi::ML::Classify::Classifier.new(
  @conf[:classify][:name], @conf[:classify][:file])


#======================================================================
# Preprocess, transform and classify one document at a time
#======================================================================

Xi::ML.logger.info('Clean, transform and classify documents')

# start the profiler
RubyProf.start()
RubyProf.pause()

File.read(@options[:input]).each_line do |line|
  doc = line.chomp()

  RubyProf.resume()
  clean_doc = @cleaner.clean_doc(doc)
  trans_doc = @transformer.transform_doc(clean_doc)
  _prediction = @classifier.classify_doc(trans_doc)
  RubyProf.pause()
end

# stop the profiler and store its analysis
result = RubyProf.stop()
printer = RubyProf::MultiPrinter.new(result)
printer.print(path: @options[:output])
