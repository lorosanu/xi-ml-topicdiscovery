
# Description

[Python] Train transformation models and classification models
  * 'gensim' library for model dimension reduction
  * 'sklearn' library for classification

# Usage
  Object: Train and test models based on requests
  Usage:  ./bin/xi-ml-processdemands [-h] conf


# Execution:

## Local run
---

##### Install requirements on your local machine

* see: Dockerfile and requirements.txt


##### Test python code: check syntax, lint,
                        launch unit tests, build & install package,
                        clean temporary files

* make syntax
* make pylint
* make pytest

* make clean

* make build
* make install
* make local-install

* [WIP] make upload
* [WIP] make remote-install


##### Local execution: train and use transformation and classification models

* Usage example
    ./bin/xi-ml-processdemands conf/fr/config.yml

* Config example
    res: /mnt/data/ml/resources/fr/es1preprod_24102016/
    classes:
      - sport
      - non-sport
    preprocessings:
      - PDLW
    transformations:
      - LSI
    classifiers:
      LogisticRegression:
        classif_types:
          - multiclass
        training_types:
          - offline
        chunk_sizes:
          - -1
          - 1000
          - 10000
          - 100000
          - 1000000
        kwargs:
          penalty: l2
          solver: lbfgs
          max_iter: 200
      MLPClassifier:
        classif_types:
          - multiclass
          - multilabel
        training_types:
          - offline
          - online
        chunk_sizes:
          - -1
          - 1000
          - 10000
          - 100000
          - 1000000
        kwargs:
          hidden_layer_sizes:
            - 100
            - 100
          max_iter: 200
          verbose: False
          solver: lbfgs
    execution:
      - train_trans
      - get_topics
      - transform_data
      - train_classifiers
      - test_classifiers


* Notes
  - the preprocessed textual data should already be available
    (check machine-learning/topic-discovery/ruby project)
  - you can adjust the classifier's initialization arguments
    through the 'kwargs' configuration argument


##### Docker execution: train and use transformation and classification models

* Usage example
    docker-compose run --rm ml-devel \
      ./bin/xi-ml-processdemands conf/fr/config.yml

* Config example: same as local execution
